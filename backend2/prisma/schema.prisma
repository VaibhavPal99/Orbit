generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid())
  name             String?
  email            String
  username         String    @unique
  password         String
  profilePic       String
  bio              String
  isFrozen         Boolean
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  followers        Follow[]  @relation("Followers")
  followings       Follow[]  @relation("Following")
  Posts            Post[]    @relation("PostsMade")
  likedPosts       Like[] // Explicit relation for posts liked by this user
  Reply            Reply[]
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
}

model Follow {
  id          String @id @default(uuid())
  follower    User   @relation("Followers", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("Following", fields: [followingId], references: [id])
  followingId String
}

model Post {
  id         String   @id @default(uuid())
  postedBy   User     @relation("PostsMade", fields: [PostedById], references: [id])
  PostedById String
  text       String?
  img        String?
  likes      Like[] // Explicit relation for users who liked this post
  replies    Reply[]
  createdAt  DateTime @default(now())
}

model Like {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
}

model Reply {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  text      String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
}

model Message {
  id         String   @id @default(uuid())
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId   String
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String
  content    String
  createdAt  DateTime @default(now())
  read       Boolean  @default(false)
}
